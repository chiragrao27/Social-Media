{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91797\\\\Desktop\\\\react_project\\\\Social Media\\\\client\\\\src\\\\scenes\\\\widgets\\\\PostsWidget.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPosts } from \"state\";\nimport PostWidget from \"./PostWidget\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsWidget = _ref => {\n  _s();\n  let {\n    userId,\n    isProfile = false\n  } = _ref;\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  const token = useSelector(state => state.token);\n  const getPosts = async () => {\n    const response = await fetch(`http://localhost:3001/posts`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    dispatch(setPosts({\n      posts: data\n    }));\n  };\n  const getUserPosts = async () => {\n    const response = await fetch(`http://localhost:3001/post/${userId}/posts`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    dispatch(setPosts({\n      posts: data\n    }));\n  };\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n  }, []); // eslint-disable-line\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.map(_ref2 => {\n      let {\n        _id,\n        userId,\n        firstName,\n        lastName,\n        description,\n        location,\n        picturePath,\n        userPicturePath,\n        likes,\n        comments\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(PostWidget, {\n        postId: _id,\n        postUserId: userId,\n        name: `${firstName} ${lastName}`,\n        description: description,\n        location: location,\n        picturePath: picturePath,\n        userPicturePath: userPicturePath,\n        likes: likes,\n        comments: comments\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(PostsWidget, \"7TqOh3V0nCSP3QUJlbitnmq7L8o=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = PostsWidget;\nexport default PostsWidget;\nvar _c;\n$RefreshReg$(_c, \"PostsWidget\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setPosts","PostWidget","jsxDEV","_jsxDEV","Fragment","_Fragment","PostsWidget","_ref","_s","userId","isProfile","dispatch","posts","state","token","getPosts","response","fetch","method","headers","Authorization","data","json","getUserPosts","children","map","_ref2","_id","firstName","lastName","description","location","picturePath","userPicturePath","likes","comments","postId","postUserId","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91797/Desktop/react_project/Social Media/client/src/scenes/widgets/PostsWidget.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPosts } from \"state\";\r\nimport PostWidget from \"./PostWidget\";\r\n\r\n\r\nconst PostsWidget = ({ userId, isProfile = false}) =>{\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector(state => state.posts);\r\n    const token = useSelector((state) => state.token);\r\n\r\n    const getPosts = async () => {\r\n        const response = await fetch(`http://localhost:3001/posts`, {\r\n            method: 'POST',\r\n                headers: {        \r\n                            Authorization: `Bearer ${token}`\r\n                    }\r\n        });\r\n        const data = await response.json();\r\n        dispatch(setPosts({posts: data}));\r\n    }\r\n\r\n    const getUserPosts = async () => {\r\n        const response = await fetch(`http://localhost:3001/post/${userId}/posts`, {\r\n            method: 'GET',\r\n                headers: {        \r\n                            Authorization: `Bearer ${token}`\r\n                    }\r\n        });\r\n        const data = await response.json();\r\n        dispatch(setPosts({posts: data}));\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(isProfile){\r\n            getUserPosts();\r\n        }else{\r\n            getPosts();\r\n        }\r\n    }, []); // eslint-disable-line\r\n\r\n    return (\r\n    <>\r\n        {posts.map(\r\n            ({\r\n                _id,\r\n                userId,\r\n                firstName,\r\n                lastName,\r\n                description,\r\n                location,\r\n                picturePath,\r\n                userPicturePath,\r\n                likes,\r\n                comments\r\n            }) => (\r\n                <PostWidget\r\n                                    key={_id}\r\n                                    postId={_id}\r\n                                    postUserId = {userId}\r\n                                    name={`${firstName} ${lastName}` }   \r\n                                    description={description}\r\n                                    location={location}\r\n                                    picturePath={picturePath}\r\n                                    userPicturePath={userPicturePath}\r\n                                    likes={likes}\r\n                                    comments={comments}\r\n                                />\r\n            )\r\n        )}\r\n    \r\n    </>)\r\n\r\n};\r\n\r\nexport default PostsWidget;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGtC,MAAMC,WAAW,GAAGC,IAAA,IAAiC;EAAAC,EAAA;EAAA,IAAhC;IAAEC,MAAM;IAAEC,SAAS,GAAG;EAAK,CAAC,GAAAH,IAAA;EAC7C,MAAMI,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAMc,KAAK,GAAGb,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACD,KAAK,CAAC;EAC/C,MAAME,KAAK,GAAGf,WAAW,CAAEc,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC;EAEjD,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,6BAA4B,EAAE;MACxDC,MAAM,EAAE,MAAM;MACVC,OAAO,EAAE;QACGC,aAAa,EAAG,UAASN,KAAM;MACvC;IACZ,CAAC,CAAC;IACF,MAAMO,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCX,QAAQ,CAACX,QAAQ,CAAC;MAACY,KAAK,EAAES;IAAI,CAAC,CAAC,CAAC;EACrC,CAAC;EAED,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BR,MAAO,QAAO,EAAE;MACvES,MAAM,EAAE,KAAK;MACTC,OAAO,EAAE;QACGC,aAAa,EAAG,UAASN,KAAM;MACvC;IACZ,CAAC,CAAC;IACF,MAAMO,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCX,QAAQ,CAACX,QAAQ,CAAC;MAACY,KAAK,EAAES;IAAI,CAAC,CAAC,CAAC;EACrC,CAAC;EAEDxB,SAAS,CAAC,MAAI;IACV,IAAGa,SAAS,EAAC;MACTa,YAAY,CAAC,CAAC;IAClB,CAAC,MAAI;MACDR,QAAQ,CAAC,CAAC;IACd;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACAZ,OAAA,CAAAE,SAAA;IAAAmB,QAAA,EACKZ,KAAK,CAACa,GAAG,CACNC,KAAA;MAAA,IAAC;QACGC,GAAG;QACHlB,MAAM;QACNmB,SAAS;QACTC,QAAQ;QACRC,WAAW;QACXC,QAAQ;QACRC,WAAW;QACXC,eAAe;QACfC,KAAK;QACLC;MACJ,CAAC,GAAAT,KAAA;MAAA,oBACGvB,OAAA,CAACF,UAAU;QAESmC,MAAM,EAAET,GAAI;QACZU,UAAU,EAAI5B,MAAO;QACrB6B,IAAI,EAAG,GAAEV,SAAU,IAAGC,QAAS,EAAG;QAClCC,WAAW,EAAEA,WAAY;QACzBC,QAAQ,EAAEA,QAAS;QACnBC,WAAW,EAAEA,WAAY;QACzBC,eAAe,EAAEA,eAAgB;QACjCC,KAAK,EAAEA,KAAM;QACbC,QAAQ,EAAEA;MAAS,GATdR,GAAG;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUX,CAAC;IAAA,CAE1B;EAAC,gBAEH,CAAC;AAEP,CAAC;AAAClC,EAAA,CAnEIF,WAAW;EAAA,QACIR,WAAW,EACdC,WAAW,EACXA,WAAW;AAAA;AAAA4C,EAAA,GAHvBrC,WAAW;AAqEjB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}